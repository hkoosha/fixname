#!/usr/bin/python3

import sys, re

REMOVE_NON_ALPHA_NUM = True
PRESERVE = "_"
REMOVE = "\r\n"

MEDIA_SKIP_UNDERLINE = False
MEDIA_EXT = (
  "mp3", "mp4", "wma", "wav", "flv", "mkv", 
  "avi", "webm", "rmvb", "jpg", "jpeg", "ogg",
  "webm", "divx", "mlv", "srt", "png", "tiff",
  "3gp", "gif"
)

REPLACE = {
 " ": "_",
 "&" : " and ",

 "i'm": "i am",
 "we're": "we are",
 "you're": "you are",
 "they're": "they are",
 "he's": "he is",
 "she's": "she is",
 "it's": "it is",

 "i'll": "i will",   
 "you'll": "you will",   
 "we'll": "we will",   
 "they'll": "they will",   
 "he'll": "he will",   
 "she'll": "she will",   
 "it'll": "it will",   

 "let's": "lets",   
}

TRANSLITERATE_FA = {
    "ا" : "a", "آ" : "a", "إ" : "a", "أ" : "a",
    "ب" : "b", "پ" : "p", "ت" : "t", "ث" : "s",
    "ج" : "j", "چ" : "ch", "ح" : "h", "خ" : "kh",
    "د" : "d", "ذ" : "z", "ر" : "r", "ز" : "z", "ژ" : "j",
    "س" : "s", "ش" : "sh", "ص" : "s", "ض" : "z",
    "ط" : "t", "ظ" : "z", "ع" : "a", "غ" : "gh",
    "ف" : "f", "ق" : "gh", "ک" : "k", "گ" : "g",
    "ل" : "l", "م" : "m", "ن" : "n", "و" : "v",
    "ه" : "h", "ی" : "y",
    "ؤ": "o", "ئ": "y", "ي": "y", "ة": "h", "ك": "k",
}

TRANSLITERATE = (TRANSLITERATE_FA, )


# ______________________________________________________________________________

def isAscii(s):
    return len(s) == len(s.encode())

def isAlnum(s):
    return isAscii(s) and s.isalnum()

def fixDoubleScore(s):
  while "__" in s:
    s = s.replace("__", "_")  
  return s


def hasSuffix(s):
  sx = s[s.rindex('.') + 1] if '.' in s else ""
  return not (sx == "") \
     and ('.' in s) \
     and not (s.endswith('.')) \
     and not (s == '.') \
     and not (sx == '.') \
     and not (len(sx) > 4) \
     and (sx.isalnum())

def trim(s, ws):
  for w in ws:
      if w in s and len(s) > 1 and s[0] == w:
        s = s[1:]
      if w in s and len(s) > 1 and s[len(s)-1] == w:
        s = s[:-1]
  return s

def toSnakeCase(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    ret = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
    return ret

# ______________________________________________________________________________

def toMediaCase(toFix):
  if not (len(toFix) > 4 and toFix[-3:] in MEDIA_EXT) and \
     not (len(toFix) > 5 and toFix[-4:] in MEDIA_EXT):
       return toFix
  s = ""
  isExtension = False
  for e in enumerate(toFix):
    i, t = e
    if isExtension:
      s += t
    elif t == ".":
      isExtension = True
      s += "."
    elif t == "_" and MEDIA_SKIP_UNDERLINE:
      pass
    elif i == 0 or toFix[i-1] == "_":
      s += t.upper()
    else:
      s += t
  return s

def remove(s):
  for c in REMOVE:
    s = s.replace(c, "_")
  return s

def replace(s):
  for c, w in REPLACE.items():
    s = s.replace(c, w)
  return s

def removeNonAscii(s):
  if not REMOVE_NON_ALPHA_NUM:
    return s
  for c in list(s):
    if not all(ord(cc) < 128 for cc in c) and not c in PRESERVE:
      s = s.replace(c, '_')
  return s

def transliterate(s):
  for i in TRANSLITERATE:
    for fromChar in i:
      s = s.replace(fromChar, i[fromChar])
  return s

def appendSuffix(orig, s):
  sx = s[s.rindex('.') + 1] if '.' in s else ""
  if sx == "" or \
     sx == '.' or \
     len(sx) > 4 or \
     not isAscii(sx) or \
     '.' not in s or \
     s.endswith('.') or \
     s == '.':
    return s
  sp = s.split('_')
  last = sp.pop().split('.')
  ext = last.pop()
  return "_".join(sp) + "_".join(last) + "." + ext

# ______________________________________________________________________________

def fixName(name):
  s = name
  s = toSnakeCase(s)
  s = remove(s)
  s = s.strip().lower()
  s = replace(s)
  s = transliterate(s)
  s = removeNonAscii(s)
  s = fixDoubleScore(s)
  s = trim(s, ('.', '_'))
  s = appendSuffix(name, s)
  return s
  

def main():
    line = ""
    ff = sys.stdin.readline()
    while len(ff) > 0:
      line += ff
      ff = sys.stdin.readline()

    fixed = fixName(line)
    fixed = toMediaCase(fixed)

    if len(fixed) < 1 or fixed[0] == ".": 
      print(line)
    else:
      print(fixed)

if __name__ == "__main__":
  main()

